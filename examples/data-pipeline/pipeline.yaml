schema: https://stepflow.org/schemas/v1/flow.json
name: "AI-Powered Sales Analysis with Regional Breakdown"
description: "Processes sales data, calculates metrics, analyzes regions using nested workflows, and generates AI insights"

input_schema:
  type: object
  properties:
    sales_data:
      type: array
      description: "Array of sales records"
    target_revenue:
      type: number
      description: "Target revenue for analysis"

steps:
  # Parallel data processing steps
  - id: sum_revenue_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: "sum(item['revenue'] for item in input['sales_data'])"
      blob_type: "data"

  - id: calculate_total_revenue
    component: "/python/udf"
    input:
      blob_id: { $from: { step: sum_revenue_udf }, path: "blob_id" }
      input:
        sales_data: { $from: { workflow: input }, path: "sales_data" }

  - id: count_sales_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: "len(input['sales_data'])"
      blob_type: "data"

  - id: count_sales
    component: "/python/udf"
    input:
      blob_id: { $from: { step: count_sales_udf }, path: "blob_id" }
      input:
        sales_data: { $from: { workflow: input }, path: "sales_data" }

  - id: average_sale_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: "sum(item['revenue'] for item in input['sales_data']) / len(input['sales_data']) if input['sales_data'] else 0"
      blob_type: "data"

  - id: calculate_average_sale
    component: "/python/udf"
    input:
      blob_id: { $from: { step: average_sale_udf }, path: "blob_id" }
      input:
        sales_data: { $from: { workflow: input }, path: "sales_data" }

  # This step waits for total_revenue to complete
  - id: divide_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: "input['a'] / input['b'] if input['b'] != 0 else 0"
      blob_type: "data"

  - id: calculate_performance_ratio
    component: "/python/udf"
    input:
      blob_id: { $from: { step: divide_udf }, path: "blob_id" }
      input:
        a: { $from: { step: calculate_total_revenue }, path: "result" }
        b: { $from: { workflow: input }, path: "target_revenue" }

  # Regional analysis using eval components (run in parallel)
  - id: analyze_west_region
    component: /builtin/eval
    input:
      workflow:
        $literal:
          schema: https://stepflow.org/schemas/v1/flow.json
          name: "West Region Analysis"
          steps:
            - id: filter_west_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "[item for item in input['sales_data'] if item.get('region') == 'West']"

            - id: filter_region
              component: "/python/udf"
              input:
                blob_id: { $from: { step: filter_west_udf }, path: "blob_id" }
                input:
                  sales_data: { $from: { workflow: input }, path: "sales_data" }

            - id: west_revenue_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "sum(item['revenue'] for item in input['filtered_data'])"

            - id: region_revenue
              component: "/python/udf"
              input:
                blob_id: { $from: { step: west_revenue_udf }, path: "blob_id" }
                input:
                  filtered_data: { $from: { step: filter_region }, path: "result" }

            - id: west_count_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "len(input['filtered_data'])"

            - id: region_count
              component: "/python/udf"
              input:
                blob_id: { $from: { step: west_count_udf }, path: "blob_id" }
                input:
                  filtered_data: { $from: { step: filter_region }, path: "result" }

          output:
            revenue: { $from: { step: region_revenue }, path: "result" }
            count: { $from: { step: region_count }, path: "result" }

      input:
        sales_data: { $from: { workflow: input }, path: "sales_data" }

  - id: analyze_east_region
    component: /builtin/eval
    input:
      workflow:
        $literal:
          schema: https://stepflow.org/schemas/v1/flow.json
          name: "East Region Analysis"
          steps:
            - id: filter_east_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "[item for item in input['sales_data'] if item.get('region') == 'East']"

            - id: filter_region
              component: "/python/udf"
              input:
                blob_id: { $from: { step: filter_east_udf }, path: "blob_id" }
                input:
                  sales_data: { $from: { workflow: input }, path: "sales_data" }

            - id: east_revenue_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "sum(item['revenue'] for item in input['filtered_data'])"

            - id: region_revenue
              component: "/python/udf"
              input:
                blob_id: { $from: { step: east_revenue_udf }, path: "blob_id" }
                input:
                  filtered_data: { $from: { step: filter_region }, path: "result" }

            - id: east_count_udf
              component: /builtin/put_blob
              input:
                data:
                  $literal:
                    code: "len(input['filtered_data'])"

            - id: region_count
              component: "/python/udf"
              input:
                blob_id: { $from: { step: east_count_udf }, path: "blob_id" }
                input:
                  filtered_data: { $from: { step: filter_region }, path: "result" }

          output:
            revenue: { $from: { step: region_revenue }, path: "result" }
            count: { $from: { step: region_count }, path: "result" }

      input:
        sales_data: { $from: { workflow: input }, path: "sales_data" }

  # Compare regional performance
  - id: compare_regions_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: |
            west_rev = input['west_metrics']['revenue']
            east_rev = input['east_metrics']['revenue']
            west_count = input['west_metrics']['count']
            east_count = input['east_metrics']['count']
            {
              'west_revenue': west_rev,
              'east_revenue': east_rev,
              'west_count': west_count,
              'east_count': east_count,
              'revenue_leader': 'West' if west_rev > east_rev else 'East',
              'count_leader': 'West' if west_count > east_count else 'East',
              'revenue_difference': abs(west_rev - east_rev),
              'count_difference': abs(west_count - east_count)
            }

  - id: compare_regions
    component: "/python/udf"
    input:
      blob_id: { $from: { step: compare_regions_udf }, path: "blob_id" }
      input:
        west_metrics: { $from: { step: analyze_west_region }, path: "result" }
        east_metrics: { $from: { step: analyze_east_region }, path: "result" }

  # Format metrics for AI analysis (waits for all calculations)
  - id: format_metrics_udf
    component: /builtin/put_blob
    input:
      data:
        $literal:
          code: |
            f"""Sales Analysis Summary:

            Overall Metrics:
            - Total Revenue: ${input['total_revenue']:,.2f}
            - Number of Sales: {input['sales_count']}
            - Average Sale Value: ${input['average_sale']:,.2f}
            - Performance vs Target: {input['performance_ratio']:.1%} (Target: ${input['target_revenue']:,.2f})

            Regional Performance:
            - West Region: ${input['regional_comparison']['west_revenue']:,.2f} ({input['regional_comparison']['west_count']} sales)
            - East Region: ${input['regional_comparison']['east_revenue']:,.2f} ({input['regional_comparison']['east_count']} sales)
            - Revenue Leader: {input['regional_comparison']['revenue_leader']} (${input['regional_comparison']['revenue_difference']:,.2f} difference)
            - Volume Leader: {input['regional_comparison']['count_leader']} ({input['regional_comparison']['count_difference']} sales difference)

            Please provide strategic insights and recommendations based on this data."""

  - id: format_metrics_summary
    component: "/python/udf"
    input:
      blob_id: { $from: { step: format_metrics_udf }, path: "blob_id" }
      input:
        total_revenue: { $from: { step: calculate_total_revenue }, path: "result" }
        sales_count: { $from: { step: count_sales }, path: "result" }
        average_sale: { $from: { step: calculate_average_sale }, path: "result" }
        performance_ratio: { $from: { step: calculate_performance_ratio }, path: "result" }
        target_revenue: { $from: { workflow: input }, path: "target_revenue" }
        regional_comparison: { $from: { step: compare_regions }, path: "result" }

  # Format messages for OpenAI (depends on metrics summary)
  - id: create_openai_messages
    component: /builtin/create_messages
    input:
      system_instructions: "You are a senior sales analyst providing insights based on business metrics and regional performance. Be specific and actionable in your recommendations."
      user_prompt: { $from: { step: format_metrics_summary }, path: "summary" }

  # Generate AI insights from the comprehensive metrics
  - id: generate_ai_insights
    component: /builtin/openai
    input:
      messages: { $from: { step: create_openai_messages }, path: "messages" }

output:
  total_revenue: { $from: { step: calculate_total_revenue }, path: "result" }
  sales_count: { $from: { step: count_sales }, path: "result" }
  average_sale: { $from: { step: calculate_average_sale }, path: "result" }
  performance_ratio: { $from: { step: calculate_performance_ratio }, path: "result" }
  west_analysis: { $from: { step: analyze_west_region }, path: "result" }
  east_analysis: { $from: { step: analyze_east_region }, path: "result" }
  regional_comparison: { $from: { step: compare_regions }, path: "comparison" }
  ai_insights: { $from: { step: generate_ai_insights }, path: "response" }