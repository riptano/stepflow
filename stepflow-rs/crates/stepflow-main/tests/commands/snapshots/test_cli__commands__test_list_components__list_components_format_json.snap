---
source: crates/stepflow-main/tests/commands/test_list_components.rs
info:
  program: stepflow
  args:
    - "--log-file=/dev/null"
    - "--omit-stack-trace"
    - "--log-level=error"
    - list-components
    - "--config=../../tests/stepflow-config.yml"
    - "--format=json"
---
success: true
exit_code: 0
----- stdout -----
{
  "components": [
    {
      "component": "create_messages",
      "input_schema": {
        "type": "object",
        "required": [
          "user_prompt"
        ],
        "properties": {
          "system_instructions": {
            "description": "The system instructions to include in the message list.",
            "type": [
              "string",
              "null"
            ]
          },
          "user_prompt": {
            "description": "The user prompt to include in the message list.",
            "type": "string"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChatMessage"
            }
          }
        }
      },
      "description": "Create a chat message list from system instructions and user prompt"
    },
    {
      "component": "eval",
      "input_schema": {
        "description": "Input for the eval component",
        "type": "object",
        "required": [
          "input",
          "workflow"
        ],
        "properties": {
          "input": {
            "description": "The input to pass to the workflow",
            "$ref": "#/definitions/ValueRef"
          },
          "workflow": {
            "description": "The workflow to execute",
            "$ref": "#/definitions/Flow"
          },
          "workflow_hash": {
            "description": "Precomputed hash of the workflow.",
            "anyOf": [
              {
                "$ref": "#/definitions/FlowHash"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "output_schema": {
        "description": "Output from the eval component\n\nThe output is simply the result of the nested workflow execution",
        "type": "object",
        "required": [
          "result",
          "run_id"
        ],
        "properties": {
          "result": {
            "description": "The result from executing the nested workflow",
            "$ref": "#/definitions/ValueRef"
          },
          "run_id": {
            "description": "The run ID of the nested workflow",
            "type": "string"
          }
        }
      },
      "description": "Execute a nested workflow with given input and return the result"
    },
    {
      "component": "get_blob",
      "input_schema": {
        "description": "Input for the get_blob component",
        "type": "object",
        "required": [
          "blob_id"
        ],
        "properties": {
          "blob_id": {
            "description": "The blob ID to retrieve",
            "type": "string"
          }
        }
      },
      "output_schema": {
        "description": "Output from the get_blob component",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "description": "The JSON data stored in the blob"
          }
        }
      },
      "description": "Retrieve JSON data from a blob using its ID"
    },
    {
      "component": "load_file",
      "input_schema": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "format": {
            "description": "Format of the file (json, yaml, text). If not specified, inferred from extension",
            "anyOf": [
              {
                "$ref": "#/definitions/FileFormat"
              },
              {
                "type": "null"
              }
            ]
          },
          "path": {
            "description": "Path to the file to load",
            "type": "string"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "required": [
          "data",
          "metadata"
        ],
        "properties": {
          "data": {
            "description": "The loaded data (parsed JSON/YAML or raw text)"
          },
          "metadata": {
            "description": "Metadata about the loaded file",
            "$ref": "#/definitions/FileMetadata"
          }
        }
      },
      "description": "Load and parse a file (JSON, YAML, or text) from the filesystem"
    },
    {
      "component": "openai",
      "input_schema": {
        "description": "Input for the OpenAI component",
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "api_key": {
            "description": "API key override (optional - uses environment variable if not provided)",
            "type": [
              "string",
              "null"
            ]
          },
          "max_tokens": {
            "description": "Max tokens to generate (optional)",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint16",
            "minimum": 0.0
          },
          "messages": {
            "description": "The messages to send to the API",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChatMessage"
            }
          },
          "temperature": {
            "description": "Temperature setting (optional)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          }
        }
      },
      "output_schema": {
        "description": "Output from the OpenAI component",
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "description": "The generated response text",
            "type": "string"
          }
        }
      },
      "description": "Send messages to OpenAI's chat completion API and get a response"
    },
    {
      "component": "put_blob",
      "input_schema": {
        "description": "Input for the put_blob component",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "description": "The JSON data to store as a blob"
          }
        }
      },
      "output_schema": {
        "description": "Output from the put_blob component",
        "type": "object",
        "required": [
          "blob_id"
        ],
        "properties": {
          "blob_id": {
            "description": "The blob ID for the stored data",
            "type": "string"
          }
        }
      },
      "description": "Store JSON data as a blob and return its content-addressable ID"
    }
  ]
}

----- stderr -----
