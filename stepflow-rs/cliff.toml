# Configuration file for git-cliff for stepflow-rs package
# See: https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

"""
# Template for the changelog body
body = """
{%- if version -%}
    {%- set clean_version = version | trim_start_matches(pat="stepflow-rs-") -%}
    ## <a id="{{ clean_version }}"></a> [StepFlow {{ clean_version }}](https://github.com/riptano/stepflow/releases/tag/stepflow-rs-{{ clean_version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{%- else -%}
    ## unreleased
{%- endif -%}
{%- if message %}
    {{ message }}
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {%- endfor %}
{% endfor %}\n
"""
# Remove the trailing whitespace in the template
trim = true
# Changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out commits that are not conventional
filter_unconventional = true
# Process each line of a commit as an individual commit
split_commits = false
# Only include commits that affect the stepflow-rs directory or root files that affect stepflow-rs
filter_commits = true
# Include commits that modify files in these paths
include_path = [
    "stepflow-rs/**",
    "CLAUDE.md",
    "CONTRIBUTING.md",
    "README.md",
    ".github/workflows/release_rust.yml",
    ".github/workflows/ci.yml"
]
# Regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/riptano/stepflow/pull/${2}))"},
]
# Regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features"},
  { message = "^fix", group = "Bug Fixes"},
  { message = "^doc", group = "Documentation"},
  { message = "^perf", group = "Performance"},
  { message = "^refactor", group = "Refactoring"},
  { message = "^style", group = "Style"},
  { message = "^test", group = "Testing"},
  { message = "^chore\\(release\\):", skip = true},
  { message = "^chore\\(deps\\)", skip = true},
  { message = "^chore|^ci", group = "Miscellaneous Tasks"},
  { body = ".*security", group = "Security"},
  { message = "^revert", group = "Revert"},
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# Glob pattern for matching git tags
tag_pattern = "stepflow-rs-[0-9.]*"
# Regex for skipping tags
# Regex for ignoring tags
ignore_tags = ""
# Sort the tags topologically
topo_order = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"