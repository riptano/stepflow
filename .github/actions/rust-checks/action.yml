name: 'Rust Build & Test'
description: 'Comprehensive compilation, testing, and lint analysis for Rust code'

# =============================================================================
# RUST BUILD & TEST CHECKS
# =============================================================================
# This action performs heavy compilation-based checks:
# - Full test suite execution (cargo test)
# - Comprehensive linting analysis (cargo clippy)
# - Compilation verification (cargo check)
#
# EXECUTION STRATEGY:
# - Runs in parallel with rust-style for maximum CI efficiency
# - Shares compilation cache between test and clippy for performance
# - Uses shared script logic with scripts/check-rust.sh for consistency
# - Takes 3-5 minutes but provides comprehensive functionality coverage
#
# COMPILATION OPTIMIZATION:
# - Uses Swatinem/rust-cache for dependency caching
# - Dependencies are pre-optimized (opt-level = 3) for faster builds
# - Clippy reuses test compilation artifacts when possible
#
# CI INTEGRATION:
# - Called from ci.yml as a parallel job alongside rust-style
# - Supports matrix builds for cross-platform testing
# - Provides comprehensive coverage while rust-style gives fast feedback
# =============================================================================

inputs:
  os:
    description: 'Operating system to run on'
    required: false
    default: 'ubuntu-latest'
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        components: 'clippy'

    # Configure Rust dependency caching for faster builds
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          stepflow-rs

    # Install cargo-deny for dependency security audit
    # Intsall cargo-machete for unused dependency detection
    - name: Install cargo-deny
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-deny,cargo-machete

    # Install UV and Python for HTTP integration tests
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.7.5"
        enable-cache: true

    - name: Set up Python
      shell: bash
      run: uv python install
      working-directory: sdks/python

    - name: Install HTTP optional dependencies
      shell: bash
      run: uv sync --extra http
      working-directory: sdks/python

    # Run Rust build and test checks using the shared script
    - name: Run Rust build and test checks
      shell: bash
      run: ./scripts/check-rust.sh