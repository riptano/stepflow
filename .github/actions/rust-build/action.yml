name: 'Rust Build & Test'
description: 'Comprehensive compilation, testing, and lint analysis for Rust code'

# =============================================================================
# RUST BUILD & TEST CHECKS
# =============================================================================
# This action performs heavy compilation-based checks:
# - Full test suite execution (cargo test)
# - Comprehensive linting analysis (cargo clippy)
#
# EXECUTION STRATEGY:
# - Runs in parallel with rust-style for maximum CI efficiency
# - Shares compilation cache between test and clippy for performance
# - Uses continue-on-error to run both checks even if one fails
# - Takes 3-5 minutes but provides comprehensive functionality coverage
#
# COMPILATION OPTIMIZATION:
# - Uses Swatinem/rust-cache for dependency caching
# - Dependencies are pre-optimized (opt-level = 3) for faster builds
# - Clippy reuses test compilation artifacts when possible
#
# CI INTEGRATION:  
# - Called from ci.yml as a parallel job alongside rust-style
# - Supports matrix builds for cross-platform testing
# - Provides comprehensive coverage while rust-style gives fast feedback
# =============================================================================

inputs:
  os:
    description: 'Operating system to run on'
    required: false
    default: 'ubuntu-latest'
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        components: 'clippy'

    # Configure Rust dependency caching for faster builds
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          stepflow-rs

    # Install UV and Python for HTTP integration tests
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.7.5"
        enable-cache: true

    - name: Set up Python
      shell: bash
      run: uv python install
      working-directory: sdks/python

    - name: Install HTTP optional dependencies
      shell: bash
      run: uv sync --extra http
      working-directory: sdks/python

    # Run the full test suite - continue even if it fails so we can run clippy too
    - name: Run Rust tests
      shell: bash
      run: cargo test
      working-directory: stepflow-rs
      continue-on-error: true
      id: test

    # Run clippy linting - reuses compilation from tests when possible
    - name: Run Rust linting (clippy)
      shell: bash
      run: cargo clippy
      working-directory: stepflow-rs
      continue-on-error: true
      id: clippy

    # Aggregate all results - fail the action if any check failed
    # This ensures we get complete feedback while still failing CI appropriately
    - name: Report build & test results
      shell: bash
      if: always()
      run: |
        echo "=== Rust Build & Test Results ==="
        
        # Check each step outcome
        test_result="${{ steps.test.outcome }}"
        clippy_result="${{ steps.clippy.outcome }}"
        
        echo "ðŸ§ª Tests: $test_result"
        echo "ðŸ“Ž Clippy linting: $clippy_result"
        
        # Fail if any check failed
        if [[ "$test_result" == "failure" || "$clippy_result" == "failure" ]]; then
          echo "::error::One or more build/test checks failed"
          echo "::notice::All checks were run to provide complete feedback"
          exit 1
        else
          echo "âœ… All build and test checks passed!"
        fi