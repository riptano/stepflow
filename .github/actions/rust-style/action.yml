name: 'Rust Style & Quality Checks'
description: 'Fast parallel checks for Rust code style and dependency hygiene'

# =============================================================================
# RUST STYLE & QUALITY CHECKS
# =============================================================================
# This action performs lightweight checks that don't require compilation:
# - Code formatting (cargo fmt --check)
# - Dependency security audit (cargo deny)  
# - Unused dependency detection (cargo machete)
#
# EXECUTION STRATEGY:
# - Runs in parallel with rust-build for maximum CI efficiency
# - Provides fast feedback (~30-60s) on common style issues
# - Uses continue-on-error to ensure all checks run even if earlier ones fail
# - Aggregates results at the end to provide complete feedback
#
# CI INTEGRATION:
# - Called from ci.yml as a parallel job alongside rust-build
# - No compilation required, so much faster than test/clippy
# - Helps developers get quick feedback on style before heavier checks complete
# =============================================================================

inputs:
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust toolchain (minimal)
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        components: 'rustfmt'

    # Run formatting check - continue even if it fails so we can run all checks
    - name: Check Rust formatting
      shell: bash
      run: cargo fmt --check
      working-directory: stepflow-rs
      continue-on-error: true
      id: fmt

    # Install and run cargo-deny for dependency security audit
    - name: Install cargo-deny
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-deny

    - name: Run dependency security audit
      shell: bash
      run: cargo deny check
      working-directory: stepflow-rs
      continue-on-error: true
      id: deny

    # Install and run cargo-machete for unused dependency detection
    - name: Install cargo-machete
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-machete

    - name: Check for unused dependencies
      shell: bash
      working-directory: stepflow-rs
      run: |
        cargo machete --with-metadata
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "::error::Unused deps found. Run \`cargo machete --fix --with-metadata\` to fix."
          exit $exit_code
        fi
      continue-on-error: true
      id: machete

    # Aggregate all results - fail the action if any check failed
    # This ensures we get complete feedback while still failing CI appropriately
    - name: Report style check results
      shell: bash
      if: always()
      run: |
        echo "=== Rust Style & Quality Check Results ==="
        
        # Check each step outcome
        fmt_result="${{ steps.fmt.outcome }}"
        deny_result="${{ steps.deny.outcome }}"
        machete_result="${{ steps.machete.outcome }}"
        
        echo "üìù Formatting: $fmt_result"
        echo "üîí Security audit: $deny_result"  
        echo "üßπ Unused deps: $machete_result"
        
        # Fail if any check failed
        if [[ "$fmt_result" == "failure" || "$deny_result" == "failure" || "$machete_result" == "failure" ]]; then
          echo "::error::One or more style/quality checks failed"
          echo "::notice::All checks were run to provide complete feedback"
          exit 1
        else
          echo "‚úÖ All style and quality checks passed!"
        fi