name: "PR Checks"

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize

jobs:
  lint-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write # Required for adding labels
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        id: lint_pr_title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          scopes: |
            core
            py
            ts
            docs
            ui

      - uses: actions/checkout@v4

      - name: Check changed paths
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core:
              - 'stepflow-rs/**'
            py:
              - 'sdks/python/**'
            ts:
              - 'sdks/typescript/**'
            docs:
              - 'docs/**'
            ui:
              - 'stepflow-ui/**'

      - name: Determine labels
        id: determine_labels
        run: |
          labels=""
          scope="${{ steps.lint_pr_title.outputs.scope }}"

          # Add scope as label if set
          if [[ -n "$scope" ]]; then
            labels="$scope"
          fi

          # Add labels for changed areas
          for area in core py ts docs ui; do
            case $area in
              core) changed="${{ steps.changes.outputs.core }}" ;;
              py) changed="${{ steps.changes.outputs.py }}" ;;
              ts) changed="${{ steps.changes.outputs.ts }}" ;;
              docs) changed="${{ steps.changes.outputs.docs }}" ;;
              ui) changed="${{ steps.changes.outputs.ui }}" ;;
            esac

            if [[ "$changed" == "true" ]] && [[ "$labels" != *"$area"* ]]; then
              [[ -n "$labels" ]] && labels="$labels,$area" || labels="$area"
            fi
          done

          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: Add labels
        if: steps.determine_labels.outputs.labels != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "${{ steps.determine_labels.outputs.labels }}"

      - uses: marocchino/sticky-pull-request-comment@v2
        # When any previous step fails, the workflow would stop. By adding this
        # condition you can continue the execution with the populated error message.
        # NOTE: the `always() && ` is significant.
        if: always() && (steps.lint_pr_title.outputs.error_message != null)
        with:
          header: pr-title-lint-error
          message: |
            Hey there and thank you for opening this pull request! üëãüèº

            We require pull request titles to follow the [Conventional Commits specification](https://www.conventionalcommits.org/en/v1.0.0/) and it looks like your proposed title needs to be adjusted.

            Details:

            ```
            ${{ steps.lint_pr_title.outputs.error_message }}
            ```

      # Delete a previous comment when the issue has been resolved
      - if: ${{ steps.lint_pr_title.outputs.error_message == null }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-title-lint-error
          delete: true

  icla-check:
    name: Check ICLA Signature
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Get PR author information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const authorLogin = pullRequest.user.login;
            const authorType = pullRequest.user.type;
            
            // Get author's email from commits if possible
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            let authorEmail = '';
            if (commits.length > 0) {
              authorEmail = commits[commits.length - 1].commit.author.email || '';
            }
            
            console.log(`PR Author: ${authorLogin} (${authorType})`);
            console.log(`Author Email: ${authorEmail}`);
            
            return {
              login: authorLogin,
              email: authorEmail,
              type: authorType
            };

      - name: Check if bot or organization
        id: check-bot
        run: |
          AUTHOR_TYPE="${{ fromJson(steps.pr-info.outputs.result).type }}"
          AUTHOR_LOGIN="${{ fromJson(steps.pr-info.outputs.result).login }}"
          
          # Skip CLA check for bots and certain automated accounts
          if [[ "$AUTHOR_TYPE" == "Bot" ]] || [[ "$AUTHOR_LOGIN" =~ ^(dependabot|renovate|github-actions)\[bot\]$ ]]; then
            echo "Skipping CLA check for bot account: $AUTHOR_LOGIN"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Check ICLA signature
        id: icla-check
        if: steps.check-bot.outputs.skip != 'true'
        uses: ./.github/actions/icla-check
        with:
          github-username: ${{ fromJson(steps.pr-info.outputs.result).login }}
          email: ${{ fromJson(steps.pr-info.outputs.result).email }}

      - name: Comment on PR if ICLA not signed
        if: steps.check-bot.outputs.skip != 'true' && steps.icla-check.outputs.signed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const authorLogin = "${{ fromJson(steps.pr-info.outputs.result).login }}";
            
            const body = `## ‚ùå Individual Contributor License Agreement (ICLA) Required
            
            Hello @${authorLogin}! Thank you for your contribution to StepFlow.
            
            Before we can merge your pull request, you need to sign our Individual Contributor License Agreement (ICLA). This is a one-time process that ensures clear licensing and intellectual property rights for the project.
            
            ### How to sign the ICLA:
            
            1. **Clone the repository locally:**
               \`\`\`bash
               git clone https://github.com/${context.repo.owner}/${context.repo.repo}.git
               cd ${context.repo.repo}
               \`\`\`
            
            2. **Sign the ICLA:**
               \`\`\`bash
               python scripts/sign_icla.py
               \`\`\`
            
            3. **Commit the updated signatures file:**
               \`\`\`bash
               git add .github/cla-signatures.json
               git commit -m "Add ICLA signature for ${authorLogin}"
               git push
               \`\`\`
            
            4. **Update your pull request** by pushing to your branch.
            
            ### What is the ICLA?
            
            The ICLA grants the project a license to use your contributions and confirms that:
            - You own the copyright to your contributions
            - You grant the project rights to use your code
            - Your contributions are your original work
            
            You can read the full agreement in [ICLA.md](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/ICLA.md).
            
            ### Need help?
            
            If you have questions about the ICLA or need assistance, please:
            - Comment on this PR
            - Open an issue
            - Contact the maintainers
            
            Thank you for contributing to StepFlow! üöÄ
            
            ---
            *This check will automatically pass once you sign the ICLA and update your pull request.*`;
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Individual Contributor License Agreement (ICLA) Required')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail if ICLA not signed
        if: steps.check-bot.outputs.skip != 'true' && steps.icla-check.outputs.signed != 'true'
        run: |
          echo "‚ùå ICLA check failed"
          echo ""
          echo "The pull request author has not signed the Individual Contributor License Agreement (ICLA)."
          echo "Please sign the ICLA by running: python scripts/sign_icla.py"
          echo ""
          echo "For more information, see: https://github.com/${{ github.repository }}/blob/main/ICLA.md"
          exit 1

