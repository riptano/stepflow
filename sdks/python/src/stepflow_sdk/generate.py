#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements.  See the NOTICE file distributed with this work for
# additional information regarding copyright ownership.  The ASF licenses this
# file to you under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

"""
Protocol generation script for StepFlow Python SDK.

This script generates the protocol types from the JSON schema.
"""

import subprocess
import sys
from pathlib import Path


def main():
    """Generate protocol types from JSON schema."""

    # Get paths
    script_dir = Path(__file__).parent
    project_root = script_dir.parent.parent
    schema_path = project_root.parent.parent / "schemas" / "protocol.json"
    output_path = script_dir / "generated_protocol.py"

    # Check that schema exists
    if not schema_path.exists():
        print(f"Error: Schema file not found at {schema_path}")
        return 1

    print(f"Generating protocol from {schema_path}")

    # Run datamodel-code-generator
    cmd = [
        "python",
        "-m",
        "datamodel_code_generator",
        "--input",
        str(schema_path),
        "--output",
        str(output_path),
        "--output-model-type",
        "msgspec.Struct",
        "--field-constraints",
        "--use-union-operator",
    ]

    print(f"Running: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode != 0:
        print(f"Error generating protocol: {result.stderr}")
        return result.returncode

    print(f"✓ Generated {output_path}")

    # Process the generated file to add license header and remove timestamp
    print("Processing generated file...")

    with open(output_path, "r") as f:
        content = f.read()

    # Parse the content 
    lines = content.split("\n")
    
    # Remove the original generator header and timestamp
    filtered_lines = []
    skip_until_imports = True
    
    for line in lines:
        # Skip generated header and timestamp lines
        if line.startswith("# generated by datamodel-codegen:") or \
           line.startswith("#   filename:") or \
           line.startswith("#   timestamp:"):
            continue
        
        # When we hit the first import, stop skipping
        if line.startswith("from __future__"):
            skip_until_imports = False
            
        if not skip_until_imports:
            filtered_lines.append(line)
    
    # Create the license header
    license_header = [
        "# Licensed to the Apache Software Foundation (ASF) under one or more contributor",
        "# license agreements.  See the NOTICE file distributed with this work for",
        "# additional information regarding copyright ownership.  The ASF licenses this",
        "# file to you under the Apache License, Version 2.0 (the \"License\"); you may not",
        "# use this file except in compliance with the License.  You may obtain a copy of",
        "# the License at",
        "#",
        "#   http://www.apache.org/licenses/LICENSE-2.0",
        "#",
        "# Unless required by applicable law or agreed to in writing, software",
        "# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
        "# License for the specific language governing permissions and limitations under",
        "# the License.",
        "",
        "# Auto-generated protocol types from schemas/protocol.json",
        "# To regenerate this file, run:",
        "#   uv run generate-protocol",
        "",
    ]

    # Combine license header with the filtered content
    new_content = "\n".join(license_header + filtered_lines)

    with open(output_path, "w") as f:
        f.write(new_content)

    print("✓ Added license header and generation documentation")
    print(f"✓ Protocol generation complete!")

    return 0


if __name__ == "__main__":
    sys.exit(main())
